package com.qj.string;


/**
 * 1332. 删除回文子序列
 * 给你一个字符串 s，它仅由字母 'a' 和 'b' 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。
 * <p>
 * 返回删除给定字符串中所有字符（字符串为空）的最小删除次数。
 * <p>
 * 「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。
 * <p>
 * 「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：s = "ababa"
 * 输出：1
 * 解释：字符串本身就是回文序列，只需要删除一次。
 * 示例 2：
 * <p>
 * 输入：s = "abb"
 * 输出：2
 * 解释："abb" -> "bb" -> "".
 * 先删除回文子序列 "a"，然后再删除 "bb"。
 * 示例 3：
 * <p>
 * 输入：s = "baabb"
 * 输出：2
 * 解释："baabb" -> "b" -> "".
 * 先删除回文子序列 "baab"，然后再删除 "b"。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= s.length <= 1000
 * s 仅包含字母 'a'  和 'b'
 *
 * @author qinjian
 */
public class 删除回文子序列_1332 {

    public int removePalindromeSub(String s) {
        // 字符串只有两种字符, 每次操作可以删除一个回文子序列
        // 注意：回文子序列是可以不连续的，与必须连续的回文子串不同，即本题可以删除同一种字符，一定是回文子序列
        // 因此，本题只需要判断字符串是否回文，回文就一次删完，返回1，不回文就一次删a，一次删b，两次删完，返回2
        int len = s.length();
        int beg = 0, end = len - 1;
        while (beg < end) {
            if (s.charAt(beg) != s.charAt(end)) {
                return 2;
            }
            beg++;
            end--;
        }
        return 1;
    }
}